# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import ublox_control_pb2 as ublox__control__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ublox_control_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class UbloxControlStub(object):
    """Interface exported by the server connected to the ublox chip
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitF9t = channel.unary_unary(
                '/ubloxcontrol.UbloxControl/InitF9t',
                request_serializer=ublox__control__pb2.InitF9tRequest.SerializeToString,
                response_deserializer=ublox__control__pb2.InitF9tResponse.FromString,
                _registered_method=True)
        self.PollMessage = channel.unary_unary(
                '/ubloxcontrol.UbloxControl/PollMessage',
                request_serializer=ublox__control__pb2.PollRequest.SerializeToString,
                response_deserializer=ublox__control__pb2.PollResponse.FromString,
                _registered_method=True)
        self.CaptureUblox = channel.unary_stream(
                '/ubloxcontrol.UbloxControl/CaptureUblox',
                request_serializer=ublox__control__pb2.CaptureUbloxRequest.SerializeToString,
                response_deserializer=ublox__control__pb2.CaptureUbloxResponse.FromString,
                _registered_method=True)


class UbloxControlServicer(object):
    """Interface exported by the server connected to the ublox chip
    """

    def InitF9t(self, request, context):
        """Configures a ZED-F9T chip and verifies all desired packets are being received.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PollMessage(self, request, context):
        """Poll all messages defined in pyubx2/ubxtypes_poll.py matching a specified regex pattern
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CaptureUblox(self, request, context):
        """Start a stream of GNSS metadata packets from the server to the headnode.
        Requires that the F9t chip has previously been SET to stream the desired messages.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UbloxControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitF9t': grpc.unary_unary_rpc_method_handler(
                    servicer.InitF9t,
                    request_deserializer=ublox__control__pb2.InitF9tRequest.FromString,
                    response_serializer=ublox__control__pb2.InitF9tResponse.SerializeToString,
            ),
            'PollMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.PollMessage,
                    request_deserializer=ublox__control__pb2.PollRequest.FromString,
                    response_serializer=ublox__control__pb2.PollResponse.SerializeToString,
            ),
            'CaptureUblox': grpc.unary_stream_rpc_method_handler(
                    servicer.CaptureUblox,
                    request_deserializer=ublox__control__pb2.CaptureUbloxRequest.FromString,
                    response_serializer=ublox__control__pb2.CaptureUbloxResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ubloxcontrol.UbloxControl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ubloxcontrol.UbloxControl', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UbloxControl(object):
    """Interface exported by the server connected to the ublox chip
    """

    @staticmethod
    def InitF9t(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ubloxcontrol.UbloxControl/InitF9t',
            ublox__control__pb2.InitF9tRequest.SerializeToString,
            ublox__control__pb2.InitF9tResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PollMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ubloxcontrol.UbloxControl/PollMessage',
            ublox__control__pb2.PollRequest.SerializeToString,
            ublox__control__pb2.PollResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CaptureUblox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ubloxcontrol.UbloxControl/CaptureUblox',
            ublox__control__pb2.CaptureUbloxRequest.SerializeToString,
            ublox__control__pb2.CaptureUbloxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
